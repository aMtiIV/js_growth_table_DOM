{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCKA,SAAS,EAAe,CAAI,CAAE,CAAY,CAAE,CAAY,EAClD,GAJW,GAKb,EAAa,QAAQ,CAAG,CAAA,EACf,GALI,EAMb,EAAa,QAAQ,CAAG,CAAA,GAExB,EAAa,QAAQ,CAAG,CAAA,EACxB,EAAa,QAAQ,CAAG,CAAA,EAE5B,CAEA,SAAS,EAAY,CAAU,EAG7B,OAFoB,EAAW,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,SAAU,IAAI,IAAI,IAGxE,IAAK,aACH,EAAM,MAAM,CAAC,EAAM,gBAAgB,CAAC,SAAS,CAAC,CAAA,IAC9C,KAEF,KAAK,aACH,EAAM,gBAAgB,CAAC,MAAM,GAC7B,KAEF,KAAK,gBACE,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAM,QAAQ,CAAA,OAAA,QAAA,CAAA,GAA3B,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,CACH,EAAI,MAAM,CAAC,EAAI,gBAAgB,CAAC,SAAS,G,C,C,M,E,CADtC,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAGL,KAEF,KAAK,gBACE,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAM,QAAQ,CAAA,OAAA,QAAA,CAAA,GAA3B,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,gBAAgB,CAAC,MAAM,E,C,M,E,CADxB,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAGT,CAEA,EAAe,EAAM,QAAQ,CAAC,MAAM,CAAE,EAAW,GAEjD,EACE,EAAM,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CACtC,EACA,EAEJ,CAEA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAU,SAAS,gBAAgB,CAAC,WACiB,E,A,S,C,E,G,M,O,C,G,O,C,EAAA,I,A,S,C,C,C,E,I,E,E,E,A,M,E,K,A,a,O,Q,C,C,O,Q,C,E,C,C,a,C,G,A,M,G,I,E,E,C,E,C,E,E,C,E,G,C,I,E,E,I,C,G,C,C,E,A,C,E,E,I,E,E,I,A,I,E,I,C,E,K,E,AAAA,I,E,M,E,E,C,G,C,M,E,C,E,C,E,E,C,Q,C,G,C,G,A,M,E,M,E,E,M,E,Q,C,G,E,M,C,C,C,O,E,EAAA,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,EAAA,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,EAAA,G,EAAA,EAAA,I,A,W,M,A,U,6I,IAApD,EAAoD,CAAA,CAAA,EAAA,CAAzC,EAAyC,CAAA,CAAA,EAAA,CAA9B,EAA8B,CAAA,CAAA,EAAA,CAAhB,EAAgB,CAA3D,CAAA,EAAA,CAEA,EAAQ,OAAO,CAAC,SAAC,CAAjB,EACE,EAAO,gBAAgB,CAAC,QAAS,EACnC","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar MAX_SIZE = 10;\nvar MIN_SIZE = 2;\nfunction refreshButtons(size, appendButton, removeButton) {\n    if (size >= MAX_SIZE) appendButton.disabled = true;\n    else if (size <= MIN_SIZE) removeButton.disabled = true;\n    else {\n        appendButton.disabled = false;\n        removeButton.disabled = false;\n    }\n}\nfunction resizeTable(tableEvent) {\n    var buttonClass = tableEvent.target.className.replace(\"button\", \"\").trim();\n    switch(buttonClass){\n        case \"append-row\":\n            tBody.append(tBody.lastElementChild.cloneNode(true));\n            break;\n        case \"remove-row\":\n            tBody.lastElementChild.remove();\n            break;\n        case \"append-column\":\n            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n            try {\n                for(var _iterator = tBody.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                    var row = _step.value;\n                    row.append(row.lastElementChild.cloneNode());\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally{\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                        _iterator.return();\n                    }\n                } finally{\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n            break;\n        case \"remove-column\":\n            var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n            try {\n                for(var _iterator1 = tBody.children[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                    var row1 = _step1.value;\n                    row1.lastElementChild.remove();\n                }\n            } catch (err) {\n                _didIteratorError1 = true;\n                _iteratorError1 = err;\n            } finally{\n                try {\n                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                        _iterator1.return();\n                    }\n                } finally{\n                    if (_didIteratorError1) {\n                        throw _iteratorError1;\n                    }\n                }\n            }\n    }\n    refreshButtons(tBody.children.length, appendRow, removeRow);\n    refreshButtons(tBody.lastElementChild.children.length, appendColumn, removeColumn);\n}\nvar tBody = document.querySelector(\"tbody\");\nvar buttons = document.querySelectorAll(\".button\");\nvar _buttons = _sliced_to_array(buttons, 4), appendRow = _buttons[0], removeRow = _buttons[1], appendColumn = _buttons[2], removeColumn = _buttons[3];\nbuttons.forEach(function(button) {\n    button.addEventListener(\"click\", resizeTable);\n});\n\n//# sourceMappingURL=index.b077f890.js.map\n","'use strict';\n\nconst MAX_SIZE = 10;\nconst MIN_SIZE = 2;\n\nfunction refreshButtons(size, appendButton, removeButton) {\n  if (size >= MAX_SIZE) {\n    appendButton.disabled = true;\n  } else if (size <= MIN_SIZE) {\n    removeButton.disabled = true;\n  } else {\n    appendButton.disabled = false;\n    removeButton.disabled = false;\n  }\n}\n\nfunction resizeTable(tableEvent) {\n  const buttonClass = tableEvent.target.className.replace('button', '').trim();\n\n  switch (buttonClass) {\n    case 'append-row':\n      tBody.append(tBody.lastElementChild.cloneNode(true));\n      break;\n\n    case 'remove-row':\n      tBody.lastElementChild.remove();\n      break;\n\n    case 'append-column':\n      for (const row of tBody.children) {\n        row.append(row.lastElementChild.cloneNode());\n      }\n      break;\n\n    case 'remove-column':\n      for (const row of tBody.children) {\n        row.lastElementChild.remove();\n      }\n  }\n\n  refreshButtons(tBody.children.length, appendRow, removeRow);\n\n  refreshButtons(\n    tBody.lastElementChild.children.length,\n    appendColumn,\n    removeColumn,\n  );\n}\n\nconst tBody = document.querySelector('tbody');\nconst buttons = document.querySelectorAll('.button');\nconst [appendRow, removeRow, appendColumn, removeColumn] = buttons;\n\nbuttons.forEach((button) => {\n  button.addEventListener('click', resizeTable);\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","refreshButtons","size","appendButton","removeButton","disabled","resizeTable","tableEvent","target","className","replace","trim","tBody","append","lastElementChild","cloneNode","remove","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","children","Symbol","iterator","next","done","row","value","err","return","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","row1","appendRow","removeRow","appendColumn","removeColumn","document","querySelector","buttons","querySelectorAll","_buttons","_array_with_holes","isArray","_iterable_to_array_limit","_s","_e","_i","_arr","_n","_d","call","push","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","slice","constructor","name","from","test","_non_iterable_rest","TypeError","forEach","button","addEventListener"],"version":3,"file":"index.b077f890.js.map"}